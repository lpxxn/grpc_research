// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/api/student_api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	protos "github.com/lpxxn/grpc_research/protos"
	model "github.com/lpxxn/grpc_research/protos/model"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QueryStudent struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryStudent) Reset()         { *m = QueryStudent{} }
func (m *QueryStudent) String() string { return proto.CompactTextString(m) }
func (*QueryStudent) ProtoMessage()    {}
func (*QueryStudent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6ad43f9b898033c, []int{0}
}

func (m *QueryStudent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryStudent.Unmarshal(m, b)
}
func (m *QueryStudent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryStudent.Marshal(b, m, deterministic)
}
func (m *QueryStudent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStudent.Merge(m, src)
}
func (m *QueryStudent) XXX_Size() int {
	return xxx_messageInfo_QueryStudent.Size(m)
}
func (m *QueryStudent) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStudent.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStudent proto.InternalMessageInfo

func (m *QueryStudent) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryStudentResponse struct {
	StudentList          []*model.Student `protobuf:"bytes,1,rep,name=studentList,proto3" json:"studentList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *QueryStudentResponse) Reset()         { *m = QueryStudentResponse{} }
func (m *QueryStudentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStudentResponse) ProtoMessage()    {}
func (*QueryStudentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6ad43f9b898033c, []int{1}
}

func (m *QueryStudentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryStudentResponse.Unmarshal(m, b)
}
func (m *QueryStudentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryStudentResponse.Marshal(b, m, deterministic)
}
func (m *QueryStudentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStudentResponse.Merge(m, src)
}
func (m *QueryStudentResponse) XXX_Size() int {
	return xxx_messageInfo_QueryStudentResponse.Size(m)
}
func (m *QueryStudentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStudentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStudentResponse proto.InternalMessageInfo

func (m *QueryStudentResponse) GetStudentList() []*model.Student {
	if m != nil {
		return m.StudentList
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryStudent)(nil), "api.QueryStudent")
	proto.RegisterType((*QueryStudentResponse)(nil), "api.QueryStudentResponse")
}

func init() { proto.RegisterFile("protos/api/student_api.proto", fileDescriptor_e6ad43f9b898033c) }

var fileDescriptor_e6ad43f9b898033c = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4b, 0xfb, 0x30,
	0x18, 0xc6, 0xc9, 0x06, 0xdf, 0xc3, 0xbb, 0xaf, 0x05, 0xa3, 0xc8, 0xac, 0x22, 0x65, 0xa7, 0x1e,
	0x24, 0xa9, 0xf3, 0xe8, 0x41, 0x36, 0x14, 0x1c, 0x88, 0x60, 0x77, 0xf3, 0x32, 0xfa, 0x23, 0xab,
	0x81, 0xa6, 0x09, 0x4d, 0xaa, 0xf4, 0x6f, 0xf7, 0x22, 0x6d, 0xda, 0x5a, 0x11, 0x04, 0x6f, 0xc9,
	0xfb, 0x3c, 0x6f, 0x3e, 0x0f, 0x0f, 0x81, 0x73, 0x55, 0x4a, 0x23, 0x35, 0x8d, 0x14, 0xa7, 0xda,
	0x54, 0x29, 0x2b, 0xcc, 0x2e, 0x52, 0x9c, 0xb4, 0x63, 0x3c, 0x8d, 0x14, 0x77, 0x8f, 0x3a, 0x4b,
	0x22, 0x85, 0x90, 0x85, 0x55, 0xdc, 0xb3, 0x6e, 0x28, 0x64, 0xca, 0xf2, 0x7e, 0x53, 0xf7, 0x62,
	0x26, 0x65, 0x96, 0x33, 0xda, 0xde, 0xe2, 0x6a, 0x4f, 0x99, 0x50, 0xa6, 0xb6, 0xe2, 0xe2, 0x02,
	0xfe, 0x3f, 0x57, 0xac, 0xac, 0xb7, 0x76, 0x07, 0x3b, 0x30, 0xe1, 0xe9, 0x1c, 0x79, 0xc8, 0x9f,
	0x86, 0x13, 0x9e, 0x2e, 0x1e, 0xe0, 0x78, 0xac, 0x87, 0x4c, 0x2b, 0x59, 0x68, 0x86, 0x03, 0x98,
	0x75, 0x98, 0x47, 0xae, 0xcd, 0x1c, 0x79, 0x53, 0x7f, 0xb6, 0x74, 0x48, 0x1b, 0x80, 0xf4, 0xe6,
	0xb1, 0x65, 0xf9, 0x81, 0x00, 0x3a, 0x61, 0x5b, 0xbe, 0xe1, 0x4b, 0x80, 0x27, 0xf6, 0x3e, 0x60,
	0xbf, 0x6f, 0xba, 0x8e, 0x8d, 0xa7, 0x49, 0xc8, 0x74, 0x95, 0x1b, 0x7c, 0x03, 0xb3, 0x4e, 0x5a,
	0xd7, 0x9b, 0x3b, 0x7c, 0x48, 0x9a, 0x56, 0xc6, 0xc1, 0xdc, 0xd3, 0x1f, 0xa3, 0x21, 0xeb, 0x0a,
	0x60, 0x95, 0xe7, 0x3d, 0xea, 0x84, 0xd8, 0x3e, 0x48, 0xdf, 0x07, 0xb9, 0x6f, 0xfa, 0xf8, 0xe5,
	0x81, 0x00, 0xe1, 0xdb, 0x81, 0xbf, 0x29, 0xf6, 0xf2, 0x6f, 0x7c, 0x1f, 0x05, 0x68, 0x7d, 0x05,
	0x07, 0x89, 0x14, 0x96, 0xd9, 0x38, 0x5f, 0xbc, 0x8c, 0x9b, 0xd7, 0x2a, 0x26, 0x89, 0x14, 0x34,
	0x2b, 0x55, 0xb2, 0x6b, 0xba, 0xaa, 0xe9, 0xd7, 0x07, 0x88, 0xff, 0xb5, 0xe7, 0xeb, 0xcf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x93, 0x04, 0x60, 0x11, 0x15, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StudentSrvClient is the client API for StudentSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StudentSrvClient interface {
	NewStudent(ctx context.Context, in *model.Student, opts ...grpc.CallOption) (*protos.Result, error)
	StudentByID(ctx context.Context, in *QueryStudent, opts ...grpc.CallOption) (*QueryStudentResponse, error)
	AllStudent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (StudentSrv_AllStudentClient, error)
	StudentInfo(ctx context.Context, opts ...grpc.CallOption) (StudentSrv_StudentInfoClient, error)
}

type studentSrvClient struct {
	cc *grpc.ClientConn
}

func NewStudentSrvClient(cc *grpc.ClientConn) StudentSrvClient {
	return &studentSrvClient{cc}
}

func (c *studentSrvClient) NewStudent(ctx context.Context, in *model.Student, opts ...grpc.CallOption) (*protos.Result, error) {
	out := new(protos.Result)
	err := c.cc.Invoke(ctx, "/api.StudentSrv/NewStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentSrvClient) StudentByID(ctx context.Context, in *QueryStudent, opts ...grpc.CallOption) (*QueryStudentResponse, error) {
	out := new(QueryStudentResponse)
	err := c.cc.Invoke(ctx, "/api.StudentSrv/StudentByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentSrvClient) AllStudent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (StudentSrv_AllStudentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StudentSrv_serviceDesc.Streams[0], "/api.StudentSrv/AllStudent", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentSrvAllStudentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudentSrv_AllStudentClient interface {
	Recv() (*QueryStudentResponse, error)
	grpc.ClientStream
}

type studentSrvAllStudentClient struct {
	grpc.ClientStream
}

func (x *studentSrvAllStudentClient) Recv() (*QueryStudentResponse, error) {
	m := new(QueryStudentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentSrvClient) StudentInfo(ctx context.Context, opts ...grpc.CallOption) (StudentSrv_StudentInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StudentSrv_serviceDesc.Streams[1], "/api.StudentSrv/StudentInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentSrvStudentInfoClient{stream}
	return x, nil
}

type StudentSrv_StudentInfoClient interface {
	Send(*QueryStudent) error
	Recv() (*QueryStudentResponse, error)
	grpc.ClientStream
}

type studentSrvStudentInfoClient struct {
	grpc.ClientStream
}

func (x *studentSrvStudentInfoClient) Send(m *QueryStudent) error {
	fmt.Println("studentSrvStudentInfoClient", m.XXX_Size())
	return x.ClientStream.SendMsg(m)
}

func (x *studentSrvStudentInfoClient) Recv() (*QueryStudentResponse, error) {
	m := new(QueryStudentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StudentSrvServer is the server API for StudentSrv service.
type StudentSrvServer interface {
	NewStudent(context.Context, *model.Student) (*protos.Result, error)
	StudentByID(context.Context, *QueryStudent) (*QueryStudentResponse, error)
	AllStudent(*empty.Empty, StudentSrv_AllStudentServer) error
	StudentInfo(StudentSrv_StudentInfoServer) error
}

func RegisterStudentSrvServer(s *grpc.Server, srv StudentSrvServer) {
	s.RegisterService(&_StudentSrv_serviceDesc, srv)
}

func _StudentSrv_NewStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentSrvServer).NewStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StudentSrv/NewStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentSrvServer).NewStudent(ctx, req.(*model.Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentSrv_StudentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentSrvServer).StudentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StudentSrv/StudentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentSrvServer).StudentByID(ctx, req.(*QueryStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentSrv_AllStudent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudentSrvServer).AllStudent(m, &studentSrvAllStudentServer{stream})
}

type StudentSrv_AllStudentServer interface {
	Send(*QueryStudentResponse) error
	grpc.ServerStream
}

type studentSrvAllStudentServer struct {
	grpc.ServerStream
}

func (x *studentSrvAllStudentServer) Send(m *QueryStudentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StudentSrv_StudentInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentSrvServer).StudentInfo(&studentSrvStudentInfoServer{stream})
}

type StudentSrv_StudentInfoServer interface {
	Send(*QueryStudentResponse) error
	Recv() (*QueryStudent, error)
	grpc.ServerStream
}

type studentSrvStudentInfoServer struct {
	grpc.ServerStream
}

func (x *studentSrvStudentInfoServer) Send(m *QueryStudentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studentSrvStudentInfoServer) Recv() (*QueryStudent, error) {
	m := new(QueryStudent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StudentSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.StudentSrv",
	HandlerType: (*StudentSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewStudent",
			Handler:    _StudentSrv_NewStudent_Handler,
		},
		{
			MethodName: "StudentByID",
			Handler:    _StudentSrv_StudentByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AllStudent",
			Handler:       _StudentSrv_AllStudent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StudentInfo",
			Handler:       _StudentSrv_StudentInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/api/student_api.proto",
}
